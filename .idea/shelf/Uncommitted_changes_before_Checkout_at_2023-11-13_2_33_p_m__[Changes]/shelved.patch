Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\r\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\r\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n    <bytecodeTargetLevel>\r\n      <module name=\"java-quick-start\" target=\"1.5\" />\r\n    </bytecodeTargetLevel>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -6,10 +6,16 @@
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
+<<<<<<< HEAD
       </profile>
     </annotationProcessing>
     <bytecodeTargetLevel>
       <module name="java-quick-start" target="1.5" />
     </bytecodeTargetLevel>
+=======
+        <module name="java-quick-start" />
+      </profile>
+    </annotationProcessing>
+>>>>>>> f67f609f1a76b07d823c41ec645452a58063f843
   </component>
 </project>
\ No newline at end of file
Index: src/interface_adapter/menu/MenuState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/menu/MenuState.java b/src/interface_adapter/menu/MenuState.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/menu/MenuState.java	
@@ -0,0 +1,4 @@
+package interface_adapter.menu;
+
+public class MenuState {
+}
Index: src/use_case/menu/MenuOutputBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.menu;\r\n\r\npublic class MenuOutputBoundary {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/menu/MenuOutputBoundary.java b/src/use_case/menu/MenuOutputBoundary.java
--- a/src/use_case/menu/MenuOutputBoundary.java	
+++ b/src/use_case/menu/MenuOutputBoundary.java	
@@ -1,4 +1,7 @@
 package use_case.menu;
 
-public class MenuOutputBoundary {
+public interface MenuOutputBoundary {
+    void prepareSuccessView();
+
+    void prepareFailView(String error);
 }
Index: src/use_case/menu/MenuInputBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.menu;\r\n\r\npublic class MenuInputBoundary {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/menu/MenuInputBoundary.java b/src/use_case/menu/MenuInputBoundary.java
--- a/src/use_case/menu/MenuInputBoundary.java	
+++ b/src/use_case/menu/MenuInputBoundary.java	
@@ -1,4 +1,6 @@
 package use_case.menu;
 
-public class MenuInputBoundary {
+public interface MenuInputBoundary {
+
+    void execute();
 }
Index: src/interface_adapter/login/LoginViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/login/LoginViewModel.java b/src/interface_adapter/login/LoginViewModel.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/login/LoginViewModel.java	
@@ -0,0 +1,36 @@
+package interface_adapter.login;
+
+import interface_adapter.ViewModel;
+import interface_adapter.signup.SignupState;
+
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
+
+public class LoginViewModel extends ViewModel {
+    public static final String TITLE_LABEL = "Welcome to Sudoku";
+
+    public static final String LOGIN_BUTTON_LABEL = "Log in";
+    public static final String CANCEL_BUTTON_LABEL = "cancel";
+
+    private LoginState loginState = new LoginState();
+
+    public LoginViewModel() {
+        super("login view");
+    }
+
+    public void setLoginState(LoginState loginState) {
+        this.loginState = loginState;
+    }
+
+    private final PropertyChangeSupport support = new PropertyChangeSupport(this);
+
+    public void firePropertyChanged() {
+        support.firePropertyChange("state", null, this.loginState);
+    }
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        support.addPropertyChangeListener(listener);
+    }
+
+    public LoginState getLoginState() { return this.loginState; }
+}
Index: src/interface_adapter/login/LoginState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/login/LoginState.java b/src/interface_adapter/login/LoginState.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/login/LoginState.java	
@@ -0,0 +1,52 @@
+package interface_adapter.login;
+
+public class LoginState {
+    // TODO: change however is necessary, just added this to avoid errors
+    private String username = "";
+    private String usernameError = null;
+    private String password = "";
+    private String passwordError = null;
+
+    public LoginState(LoginState copy) {
+        username = copy.username;
+        usernameError = copy.usernameError;
+        password = copy.password;
+        passwordError = copy.passwordError;
+    }
+
+    // Because of the previous copy constructor, the default constructor must be explicit.
+    public LoginState() {}
+
+    public String getUsername() {
+        return username;
+    }
+
+    public String getUsernameError() {
+        return usernameError;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public String getPasswordError() {
+        return passwordError;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public void setUsernameError(String usernameError) {
+        this.usernameError = usernameError;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public void setPasswordError(String passwordError) {
+        this.passwordError = passwordError;
+    }
+}
+
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.mongodb</groupId>\r\n    <artifactId>java-quick-start</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven-compiler-plugin.source>8</maven-compiler-plugin.source>\r\n        <maven-compiler-plugin.target>8</maven-compiler-plugin.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <mongodb-driver-sync.version>4.4.1</mongodb-driver-sync.version>\r\n        <maven-compiler-plugin.version>3.10.0</maven-compiler-plugin.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.mongodb</groupId>\r\n            <artifactId>mongodb-driver-sync</artifactId>\r\n            <version>${mongodb-driver-sync.version}</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>2.0.9</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-simple</artifactId>\r\n            <version>2.0.9</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <version>${maven-compiler-plugin.version}</version>\r\n                <configuration>\r\n                    <source>${maven-compiler-plugin.source}</source>\r\n                    <target>${maven-compiler-plugin.target}</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -20,19 +20,28 @@
         <dependency>
             <groupId>org.mongodb</groupId>
             <artifactId>mongodb-driver-sync</artifactId>
-            <version>${mongodb-driver-sync.version}</version>
+            <version>4.4.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mongodb</groupId>
+            <artifactId>mongodb-driver-core</artifactId>
+            <version>4.4.1</version>
         </dependency>
 
+        <!-- AKUNNA: I added this for the logging warning that I was getting -->
         <dependency>
             <groupId>org.slf4j</groupId>
             <artifactId>slf4j-api</artifactId>
             <version>2.0.9</version>
         </dependency>
+        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->
         <dependency>
             <groupId>org.slf4j</groupId>
             <artifactId>slf4j-simple</artifactId>
             <version>2.0.9</version>
+            <scope>runtime</scope>
         </dependency>
+
     </dependencies>
 
     <build>
Index: src/app/StartUseCaseFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/StartUseCaseFactory.java b/src/app/StartUseCaseFactory.java
new file mode 100644
--- /dev/null	
+++ b/src/app/StartUseCaseFactory.java	
@@ -0,0 +1,54 @@
+package app;
+
+import data_access.UserDAO;
+import entity.CommonUserFactory;
+import entity.UserFactory;
+import interface_adapter.ViewManagerModel;
+import interface_adapter.login.LoginViewModel;
+import interface_adapter.signup.SignupController;
+import interface_adapter.signup.SignupPresenter;
+import interface_adapter.signup.SignupViewModel;
+import interface_adapter.start.StartController;
+import interface_adapter.start.StartPresenter;
+import interface_adapter.start.StartViewModel;
+import use_case.signup.SignupInputBoundary;
+import use_case.signup.SignupOutputBoundary;
+import use_case.start.*;
+import view.StartView;
+
+import javax.swing.*;
+import java.io.IOException;
+
+public class StartUseCaseFactory {
+
+    private StartUseCaseFactory() {}
+
+    public static StartView create(
+            ViewManagerModel viewManagerModel, StartViewModel startViewModel, SignupViewModel signupViewModel, LoginViewModel loginViewModel, StartUserDataAccessInterface userDataAccessObject) {
+
+        try {
+            StartController startController = createUserStartUseCase(viewManagerModel, startViewModel, signupViewModel, loginViewModel, userDataAccessObject);
+            return new StartView(startController, startViewModel);
+        } catch (IOException e) {
+            JOptionPane.showMessageDialog(null, "Could not open page.");
+        }
+
+        return null;
+    }
+
+    private static StartController createUserStartUseCase(
+            ViewManagerModel viewManagerModel, StartViewModel startViewModel,
+            SignupViewModel signupViewModel, LoginViewModel loginViewModel,
+            StartUserDataAccessInterface userDataAccessObject) throws IOException {
+
+        // Notice how we pass this method's parameters to the Presenter.
+        StartOutputBoundary startOutputBoundary = new StartPresenter(startViewModel, signupViewModel,
+                loginViewModel, viewManagerModel);
+
+        StartInputBoundary startInteractor = new StartInteractor(
+                userDataAccessObject, startOutputBoundary);
+
+        return new StartController(startInteractor);
+    }
+
+}
Index: src/view/StartView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/StartView.java b/src/view/StartView.java
new file mode 100644
--- /dev/null	
+++ b/src/view/StartView.java	
@@ -0,0 +1,80 @@
+package view;
+
+import interface_adapter.start.StartController;
+import interface_adapter.start.StartViewModel;
+
+import javax.swing.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+
+public class StartView  extends JPanel implements ActionListener, PropertyChangeListener{
+
+    public final String viewName = "start view";
+
+    // adapters for start
+    private final StartViewModel startViewModel;
+    private final StartController startController;
+
+    // buttons on menu
+    private final JButton signup;
+    private final JButton login;
+
+    public StartView(StartController startController, StartViewModel startViewModel) {
+
+        // initializes start
+        this.startViewModel = startViewModel;
+        this.startController = startController;
+
+        startViewModel.addPropertyChangeListener(this);
+
+        JLabel title = new JLabel(StartViewModel.TITLE_LABEL);
+
+        JPanel buttons = new JPanel();
+
+        signup = new JButton(startViewModel.SIGNUP_BUTTON_LABEL);
+        buttons.add(signup);
+
+        login = new JButton(startViewModel.LOGIN_BUTTON_LABEL);
+        buttons.add(login);
+
+        signup.addActionListener(
+                new ActionListener() {
+                    @Override
+                    public void actionPerformed(ActionEvent e) {
+                        if (e.getSource().equals(signup)) {
+                            startController.execute("Signin");
+                        }
+                    }
+                }
+        );
+
+        login.addActionListener(
+                new ActionListener() {
+                    @Override
+                    public void actionPerformed(ActionEvent e) {
+                        if (e.getSource().equals(login)) {
+                            startController.execute("Login");
+                        }
+                    }
+                }
+        );
+
+        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
+
+        this.add(title);
+        this.add(buttons);
+
+    }
+
+    @Override
+    public void actionPerformed(ActionEvent e) {
+
+    }
+
+    @Override
+    public void propertyChange(PropertyChangeEvent evt) {
+
+    }
+}
Index: src/view/PauseGameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/PauseGameView.java b/src/view/PauseGameView.java
new file mode 100644
--- /dev/null	
+++ b/src/view/PauseGameView.java	
@@ -0,0 +1,4 @@
+package view;
+
+public class PauseGameView {
+}
Index: src/entity/CommonUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entity;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\n\r\npublic class CommonUser implements User{\r\n\r\n    private final String name;\r\n    private final String password;\r\n\r\n    CommonUser(String name, String password){\r\n        this.name = name;\r\n        this.password = password;\r\n    }\r\n\r\n    public String getName() { return name;}\r\n\r\n    public String getPassword() { return password; }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/CommonUser.java b/src/entity/CommonUser.java
--- a/src/entity/CommonUser.java	
+++ b/src/entity/CommonUser.java	
@@ -1,19 +1,37 @@
 package entity;
 
-import java.time.LocalDate;
-import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.util.Map;
 
 public class CommonUser implements User{
 
     private final String name;
     private final String password;
+    private final Map<LocalTime, Integer> scores;
+    private GameState pausedGame;
 
-    CommonUser(String name, String password){
+    public CommonUser(String name, String password, Map<LocalTime, Integer> scores){
         this.name = name;
         this.password = password;
+        this.scores = scores;
+        this.pausedGame = null;
     }
 
     public String getName() { return name;}
 
     public String getPassword() { return password; }
+
+    public Map<LocalTime, Integer> getScores() {
+        return scores;
+    }
+
+    public void addScores(LocalTime time, Integer score) {
+        scores.put(time, score);
+    }
+
+    @Override
+    public void setPausedGame(GameState currentGame) {this.pausedGame = currentGame;}
+
+    @Override
+    public GameState getPausedGame() {return this.pausedGame;}  // you will get a null pointer exception if this returns null and a method is applied to it
 }
Index: src/entity/CommonUserFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entity;\r\n\r\npublic class CommonUserFactory implements UserFactory{\r\n\r\n    @Override\r\n    public User create(String name, String password){\r\n        return new CommonUser(name, password);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/CommonUserFactory.java b/src/entity/CommonUserFactory.java
--- a/src/entity/CommonUserFactory.java	
+++ b/src/entity/CommonUserFactory.java	
@@ -1,9 +1,12 @@
 package entity;
 
+import java.time.LocalTime;
+import java.util.Map;
+
 public class CommonUserFactory implements UserFactory{
 
     @Override
-    public User create(String name, String password){
-        return new CommonUser(name, password);
+    public User create(String name, String password, Map<LocalTime, Integer> scores){
+        return new CommonUser(name, password, scores);
     }
 }
Index: src/data_access/UserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package data_access;\r\nimport java.util.*;\r\nimport com.mongodb.client.MongoClients;\r\nimport com.mongodb.client.result.InsertOneResult;\r\nimport com.mongodb.client.MongoCollection;\r\nimport org.bson.Document;\r\nimport org.bson.types.ObjectId;\r\nimport entity.User;\r\nimport entity.UserFactory;\r\n\r\nimport com.mongodb.MongoException;\r\n\r\nimport static com.mongodb.client.model.Filters.eq;\r\n\r\npublic class UserDAO {\r\n    private final MongoCollection<Document> userCollection;\r\n    private final Map<String, String> accounts = new HashMap<>(); // TODO: change to User class\r\n    private UserFactory userFactory;\r\n\r\n    //TODO: new attribute of each user with list of scores/times\r\n    public UserDAO(String uri, String database, String collection, UserFactory userFactory) throws Exception{\r\n        this.userFactory = userFactory;\r\n\r\n        //Create a MongoDB Client -> Database -> Collection (where the users are)\r\n        //TODO: add a try catch statement\r\n        // exception: https://mongodb.github.io/mongo-csharp-driver/2.6/apidocs/html/T_MongoDB_Driver_MongoException.htm\r\n        this.userCollection = MongoClients.create(uri)\r\n                .getDatabase(database)\r\n                .getCollection(collection);\r\n\r\n        // creates list of accounts (in document form)\r\n        List<Document> accounts = userCollection.find().into(new ArrayList<>());\r\n        for (Document account : accounts) {\r\n            //TODO: check its not already in accounts\r\n            String username = account.getString(\"username\");\r\n            String password = account.getString(\"password\");\r\n            //List scores??\r\n            this.addUser(username, password);\r\n        }\r\n    }\r\n\r\n    //TODO: add scores?\r\n    public void addUser(String username, String password){\r\n        if (!accounts.containsKey(username)) {\r\n            InsertOneResult result = this.userCollection.insertOne(new Document()\r\n                            .append(\"_id\", new ObjectId())\r\n                            .append(\"username\", username)\r\n                            .append(\"password\", password)\r\n                            //.append(\"scores\", {time, score})?????\r\n            );\r\n            accounts.put(username, password);\r\n        }\r\n    }\r\n\r\n    public void delete(String username){\r\n        this.userCollection.deleteOne(eq(\"username\", username));\r\n        // below is alternative method that returns info of the deleted user\r\n        //Document user = this.userCollection.findOneAndDelete(eq(\"username\", username));\r\n        accounts.remove(username);\r\n    }\r\n\r\n    public void deleteAll(){\r\n        this.userCollection.deleteMany(new Document());\r\n        accounts.clear();\r\n    }\r\n\r\n    public void addNewScore(){\r\n        //TODO\r\n    }\r\n\r\n    public void changePassword(){\r\n        //maybe TODO?\r\n    }\r\n    public String toString(){\r\n        return accounts.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * Temporary\r\n * GUIDES/DOCUMENTATION:\r\n * https://www.jetbrains.com/help/idea/convert-a-regular-project-into-a-maven-project.html\r\n * https://www.mongodb.com/products/tools/compass\r\n * https://www.mongodb.com/developer/languages/java/java-setup-crud-operations/#delete-documents\r\n * https://www.baeldung.com/java-mongodb\r\n * https://hevodata.com/learn/mongodb-java/#Step_10_Query_Documents\r\n *\r\n * TODO: SLFJ4 logger warning:\r\n * https://www.mongodb.com/docs/drivers/java/sync/v4.3/fundamentals/logging/\r\n * https://stackoverflow.com/questions/7421612/slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder\r\n * https://www.slf4j.org/codes.html#StaticLoggerBinder\r\n * https://stackoverflow.com/questions/23775906/maven-dependency-and-logging-slf4j-and-log4j\r\n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/data_access/UserDAO.java b/src/data_access/UserDAO.java
--- a/src/data_access/UserDAO.java	
+++ b/src/data_access/UserDAO.java	
@@ -1,23 +1,64 @@
 package data_access;
+import java.time.LocalTime;
 import java.util.*;
 import com.mongodb.client.MongoClients;
-import com.mongodb.client.result.InsertOneResult;
 import com.mongodb.client.MongoCollection;
+import com.mongodb.client.model.Filters;
+import com.mongodb.client.model.Updates;
+import com.mongodb.client.result.UpdateResult;
+import entity.*;
 import org.bson.Document;
+import org.bson.conversions.Bson;
 import org.bson.types.ObjectId;
-import entity.User;
-import entity.UserFactory;
 
-import com.mongodb.MongoException;
+import use_case.pause_game.PauseGameDataAccessInterface;
+import use_case.start.StartUserDataAccessInterface;
 
 import static com.mongodb.client.model.Filters.eq;
+import static com.mongodb.client.model.Filters.regex;
+
+public class UserDAO implements PauseGameDataAccessInterface, StartUserDataAccessInterface {
+    public static void main(String[] args) {
+        // TODO: DELETE MAIN, Just for testing this file
+
+        // made sample scores, boards, and users
+        Map<LocalTime, Integer> scores1 = new HashMap<>();
+        scores1.put(LocalTime.now(), 4);
+        scores1.put(LocalTime.of(12, 30, 1), 3);
+        Map<LocalTime, Integer> scores2 = new HashMap<>();
+        scores2.put(LocalTime.now(), 2);
+        scores2.put(LocalTime.of(12, 30, 1), 1);
+        EasyBoard easyBoard = new EasyBoard();
+        HardBoard hardBoard = new HardBoard();
+        CommonUser u1 = new CommonUser("u1", "p1", scores1);
+        CommonUser u2 = new CommonUser("u2", "p2", scores2);
+
+        // adding the users to a DAO
+        UserDAO userDAO;
+        try {
+            userDAO = new UserDAO("mongodb+srv://smartsudoku:smartsudoku@cluster0.hbx3f3f.mongodb.net/\n\n",
+                    "smartsudoku", "user", new CommonUserFactory());
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+        userDAO.addUser(u1);
+        userDAO.addUser(u2);
 
-public class UserDAO {
+        userDAO.accounts.forEach((key, value) -> {
+            System.out.println("Username: " + key + "Password: " + value.getPassword() + "Scores: " + value.getScores() + "Paused Game: " + value.getPausedGame());
+        });
+
+        u1.setPausedGame(new GameState(1));
+        userDAO.accounts.forEach((key, value) -> {
+            System.out.println("Username: " + key + "  Password: " + value.getPassword() + "  Scores: " + value.getScores() + "  Paused Game: " + value.getPausedGame());
+        });
+        userDAO.saveProgress(u1);
+        System.out.println(userDAO.toString());
+    }
     private final MongoCollection<Document> userCollection;
-    private final Map<String, String> accounts = new HashMap<>(); // TODO: change to User class
+    private final Map<String, User> accounts = new HashMap<>();
     private UserFactory userFactory;
 
-    //TODO: new attribute of each user with list of scores/times
     public UserDAO(String uri, String database, String collection, UserFactory userFactory) throws Exception{
         this.userFactory = userFactory;
 
@@ -28,35 +69,66 @@
                 .getDatabase(database)
                 .getCollection(collection);
 
+        // gets info from mongo and creates account object
         // creates list of accounts (in document form)
-        List<Document> accounts = userCollection.find().into(new ArrayList<>());
-        for (Document account : accounts) {
-            //TODO: check its not already in accounts
-            String username = account.getString("username");
-            String password = account.getString("password");
-            //List scores??
-            this.addUser(username, password);
+        List<Document> doc = userCollection.find().into(new ArrayList<>());
+        for (Document account : doc) {
+            String name = account.getString("name");
+            if (!accounts.containsKey(name)) {
+                String password = account.getString("password");
+                Map<String, Integer> stringScores = account.get("scores", Map.class);
+
+                // convert to localtime
+                Map<LocalTime, Integer> scores = new HashMap<>();
+                for (String time : stringScores.keySet()) {
+                    scores.put(LocalTime.parse(time), scores.get(time));
+                }
+
+                User user = userFactory.create(name, password, scores);
+                accounts.put(name, user);
+            }
         }
     }
 
-    //TODO: add scores?
-    public void addUser(String username, String password){
-        if (!accounts.containsKey(username)) {
-            InsertOneResult result = this.userCollection.insertOne(new Document()
-                            .append("_id", new ObjectId())
-                            .append("username", username)
-                            .append("password", password)
-                            //.append("scores", {time, score})?????
-            );
-            accounts.put(username, password);
+    public void addUser(User user){
+        accounts.put(user.getName(), user);
+        this.addUser();
+    }
+
+    private void addUser() { //does NOT add it name is already in database
+        for (User user : accounts.values()) {
+            String name = user.getName();
+            String password = user.getPassword();
+            Map<LocalTime, Integer> scores = user.getScores();
+            GameState pausedGame = user.getPausedGame();
+
+            // cannot store LocalTime, so must convert it to String
+            Map<String, Integer> stringScores = new HashMap<>();
+            for (LocalTime time : scores.keySet()) {
+                stringScores.put(time.toString(), scores.get(time));
+            }
+
+            if (userCollection.countDocuments(eq("name", name)) == 0) { // not in database
+                Document entry = new Document()
+                        .append("_id", new ObjectId())
+                        .append("name", name)
+                        .append("password", password)
+                        .append("scores", stringScores)
+                        .append("pausedgame", pausedGame.toStringPause());  // it
+                this.userCollection.insertOne(entry);
+            }
         }
     }
 
-    public void delete(String username){
-        this.userCollection.deleteOne(eq("username", username));
+    public boolean existsByName(String name) {
+        return accounts.containsKey(name);
+    }
+
+    public void delete(String name){
+        this.userCollection.deleteOne(eq("name", name));
         // below is alternative method that returns info of the deleted user
         //Document user = this.userCollection.findOneAndDelete(eq("username", username));
-        accounts.remove(username);
+        accounts.remove(name);
     }
 
     public void deleteAll(){
@@ -64,30 +136,50 @@
         accounts.clear();
     }
 
-    public void addNewScore(){
-        //TODO
+    public void addScore(User user, LocalTime time, Integer score){
+        accounts.get(user.getName()).addScores(time, score);
+        this.changeScores(user);
     }
 
-    public void changePassword(){
-        //maybe TODO?
+    private void changeScores(User user) {
+        this.userCollection.findOneAndUpdate(
+                eq("name", user.getName()), //find by name
+                eq("scores", user.getScores())); //update score
     }
+
     public String toString(){
         return accounts.toString();
     }
+
+    @Override
+    public void saveProgress(User user) {
+        // TODO: implement for the PauseGame use case. It should save the user's progress somewhere in their account
+        // ASSUMPTION: this method would only ever be called if the User.pausedGame is not null
+        Bson filter = Filters.eq("name", user.getName());  // creating a filter
+        Bson update = Updates.set("pausedgame", user.getPausedGame().toStringPause());  // create an update
+        UpdateResult result = this.userCollection.updateOne(filter, update);  //performing the update
+
+        // Check if the document was found and updated
+        if (result.getMatchedCount() == 1) {
+            System.out.println("Game paused and updated successfully.");
+        } else {
+            System.out.println("Game not paused or not updated.");
+        }
+    }
 }
 
-/**
- * Temporary
- * GUIDES/DOCUMENTATION:
- * https://www.jetbrains.com/help/idea/convert-a-regular-project-into-a-maven-project.html
- * https://www.mongodb.com/products/tools/compass
- * https://www.mongodb.com/developer/languages/java/java-setup-crud-operations/#delete-documents
- * https://www.baeldung.com/java-mongodb
- * https://hevodata.com/learn/mongodb-java/#Step_10_Query_Documents
- *
- * TODO: SLFJ4 logger warning:
- * https://www.mongodb.com/docs/drivers/java/sync/v4.3/fundamentals/logging/
- * https://stackoverflow.com/questions/7421612/slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder
- * https://www.slf4j.org/codes.html#StaticLoggerBinder
- * https://stackoverflow.com/questions/23775906/maven-dependency-and-logging-slf4j-and-log4j
+/*
+  Temporary
+  GUIDES/DOCUMENTATION:
+  https://www.jetbrains.com/help/idea/convert-a-regular-project-into-a-maven-project.html
+  https://www.mongodb.com/products/tools/compass
+  https://www.mongodb.com/developer/languages/java/java-setup-crud-operations/#delete-documents
+  https://www.baeldung.com/java-mongodb
+  https://hevodata.com/learn/mongodb-java/#Step_10_Query_Documents
+
+  TODO: SLFJ4 logger warning:
+  https://www.mongodb.com/docs/drivers/java/sync/v4.3/fundamentals/logging/
+  https://stackoverflow.com/questions/7421612/slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder
+  https://www.slf4j.org/codes.html#StaticLoggerBinder
+  https://stackoverflow.com/questions/23775906/maven-dependency-and-logging-slf4j-and-log4j
  */
\ No newline at end of file
Index: src/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/.idea/vcs.xml b/src/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/src/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/.idea/workspace.xml b/src/.idea/workspace.xml
new file mode 100644
--- /dev/null	
+++ b/src/.idea/workspace.xml	
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="27758703-9def-4ffd-a562-ee9de194a875" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/../.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../.idea/modules.xml" beforeDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
+  </component>
+  <component name="ProjectColorInfo"><![CDATA[{
+  "customColor": "",
+  "associatedIndex": 4
+}]]></component>
+  <component name="ProjectId" id="2Xe7hZdNQMh6fFSvX4SiN43emRM" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "main",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="27758703-9def-4ffd-a562-ee9de194a875" name="Changes" comment="" />
+      <created>1698977811441</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1698977811441</updated>
+      <workItem from="1698977812792" duration="92000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+</project>
\ No newline at end of file
Index: src/interface_adapter/signup/SignupViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/signup/SignupViewModel.java b/src/interface_adapter/signup/SignupViewModel.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/signup/SignupViewModel.java	
@@ -0,0 +1,37 @@
+package interface_adapter.signup;
+
+import interface_adapter.ViewModel;
+import interface_adapter.start.StartState;
+
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
+
+public class SignupViewModel extends ViewModel {
+
+    public static final String TITLE_LABEL = "Welcome to Sudoku";
+
+    public static final String SIGNUP_BUTTON_LABEL = "signup";
+    public static final String CANCEL_BUTTON_LABEL = "cancel";
+
+    private SignupState signupState = new SignupState();
+
+    public SignupViewModel() {
+        super("signup view");
+    }
+
+    public void setSignupState(SignupState signupState) {
+        this.signupState = signupState;
+    }
+
+    private final PropertyChangeSupport support = new PropertyChangeSupport(this);
+
+    public void firePropertyChanged() {
+        support.firePropertyChange("state", null, this.signupState);
+    }
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        support.addPropertyChangeListener(listener);
+    }
+
+    public SignupState getSignupState() { return this.signupState; }
+}
Index: src/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/.idea/misc.xml b/src/.idea/misc.xml
new file mode 100644
--- /dev/null	
+++ b/src/.idea/misc.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/use_case/menu/MenuUserDataAccessInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/menu/MenuUserDataAccessInterface.java b/src/use_case/menu/MenuUserDataAccessInterface.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/menu/MenuUserDataAccessInterface.java	
@@ -0,0 +1,4 @@
+package use_case.menu;
+
+public interface MenuUserDataAccessInterface {
+}
Index: src/interface_adapter/signup/SignupState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/signup/SignupState.java b/src/interface_adapter/signup/SignupState.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/signup/SignupState.java	
@@ -0,0 +1,4 @@
+package interface_adapter.signup;
+
+public class SignupState {
+}
Index: src/use_case/menu/MenuInteractor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/menu/MenuInteractor.java b/src/use_case/menu/MenuInteractor.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/menu/MenuInteractor.java	
@@ -0,0 +1,21 @@
+package use_case.menu;
+
+import use_case.menu.MenuUserDataAccessInterface;
+
+public class MenuInteractor implements MenuInputBoundary {
+    final MenuUserDataAccessInterface menuUserDataAccessInterface;
+    final MenuOutputBoundary menuPresenter;
+
+    public MenuInteractor(MenuUserDataAccessInterface menuUserDataAccessInterface,
+                           MenuOutputBoundary menuPresenter) {
+        this.menuUserDataAccessInterface = menuUserDataAccessInterface;
+        this.menuPresenter = menuPresenter;
+    }
+
+    @Override
+    public void execute() {
+        // redirects the user to the menu
+        //StartOutputData startOutputData = new StartOutputData();
+        menuPresenter.prepareSuccessView();
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.gitignore	
@@ -0,0 +1,1 @@
+/target/
Index: src/use_case/start/StartUserDataAccessInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/start/StartUserDataAccessInterface.java b/src/use_case/start/StartUserDataAccessInterface.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/start/StartUserDataAccessInterface.java	
@@ -0,0 +1,4 @@
+package use_case.start;
+
+public interface StartUserDataAccessInterface {
+}
Index: src/use_case/start/StartOutputBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/start/StartOutputBoundary.java b/src/use_case/start/StartOutputBoundary.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/start/StartOutputBoundary.java	
@@ -0,0 +1,8 @@
+package use_case.start;
+
+public interface StartOutputBoundary {
+
+    void prepareSuccessView(StartOutputData startOutputData);
+
+    void prepareFailView(String error);
+}
Index: src/interface_adapter/menu/MenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package interface_adapter.menu;\r\n\r\npublic class MenuController {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/menu/MenuController.java b/src/interface_adapter/menu/MenuController.java
--- a/src/interface_adapter/menu/MenuController.java	
+++ b/src/interface_adapter/menu/MenuController.java	
@@ -1,4 +1,17 @@
 package interface_adapter.menu;
 
+import use_case.menu.MenuInputBoundary;
+import use_case.menu.MenuInteractor;
+
 public class MenuController {
+
+    final MenuInputBoundary menuUseCaseInteractor;
+
+    public MenuController(MenuInteractor menuUseCaseInteractor) {
+        this.menuUseCaseInteractor = menuUseCaseInteractor;
+    }
+
+    public void execute () {
+        menuUseCaseInteractor.execute();
+    }
 }
Index: src/use_case/start/StartOutputData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/start/StartOutputData.java b/src/use_case/start/StartOutputData.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/start/StartOutputData.java	
@@ -0,0 +1,10 @@
+package use_case.start;
+
+public class StartOutputData {
+    private String interaction;
+
+    public StartOutputData (String interaction) {
+        this.interaction = interaction;
+    }
+    public String getInteracton() { return this.interaction; }
+}
Index: src/use_case/start/StartInteractor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/start/StartInteractor.java b/src/use_case/start/StartInteractor.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/start/StartInteractor.java	
@@ -0,0 +1,21 @@
+package use_case.start;
+
+import data_access.UserDAO;
+
+public class StartInteractor implements StartInputBoundary {
+
+    final StartUserDataAccessInterface startUserDataAccessInterface;
+    final StartOutputBoundary startPresenter;
+
+    public StartInteractor(StartUserDataAccessInterface startUserDataAccessInterface,
+                           StartOutputBoundary startPresenter) {
+        this.startUserDataAccessInterface = startUserDataAccessInterface;
+        this.startPresenter = startPresenter;
+    }
+
+    @Override
+    public void execute(StartInputData startInputData) {
+        StartOutputData startOutputData = new StartOutputData(startInputData.getInteracton());
+        startPresenter.prepareSuccessView(startOutputData);
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/workspace.xml	
@@ -0,0 +1,451 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="026eb654-f351-448d-bd07-42c46c6146ca" name="Changes" comment="started implementing the basics of the user_move use case (forgot to commit &amp; push these along with the previous commit &amp; push)">
+      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/.idea/modules.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/StartUseCaseFactory.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/entity/Leaderboard.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/entity/LeaderboardByHighScore.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/ViewManagerModel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/ViewModel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/login/LoginState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/login/LoginViewModel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/menu/MenuState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/menu/MenuViewModel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/pause_game/PauseGameController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/pause_game/PauseGamePresenter.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/signup/SignupState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/signup/SignupViewModel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/start/StartController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/start/StartPresenter.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/start/StartState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/interface_adapter/start/StartViewModel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/menu/MenuInteractor.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/menu/MenuUserDataAccessInterface.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/pause_game/PauseGameDataAccessInterface.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/pause_game/PauseGameInputBoundary.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/pause_game/PauseGameInputData.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/pause_game/PauseGameInteractor.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/pause_game/PauseGameOutputBoundary.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/pause_game/PauseGameOutputData.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/start/StartInputBoundary.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/start/StartInputData.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/start/StartInteractor.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/start/StartOutputBoundary.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/start/StartOutputData.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/use_case/start/StartUserDataAccessInterface.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/view/PauseGameView.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/view/StartView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/src/.idea/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/SmartSudoku.iml" beforeDir="false" afterPath="$PROJECT_DIR$/src/SmartSudoku.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/uiDesigner.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/app/Main.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/data_access/PlaceHolderDAOInterface.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/entity/Board.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/entity/EasyBoard.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/entity/GameState.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/entity/HardBoard.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/entity/SudokuAI.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/entity/User.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/entity/UserFactory.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/PlaceHolderController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/game/GameController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/game/GamePresenter.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/leaderboard/LeaderboardController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/leaderboard/LeaderboardPresenter.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/login/LoginController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/login/LoginPresenter.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/menu/MenuController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/interface_adapter/menu/MenuPresenter.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/PlaceHolderUseCase.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/game/GameInputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/game/GameOutputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/leaderboard/LeaderboardInputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/leaderboard/LeaderboardOutputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/login/LoginInputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/login/LoginOutputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/menu/MenuInputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/use_case/menu/MenuOutputBoundary.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/view/GameView.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/view/LeaderboardView.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/view/MenuView.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/production/SmartSudoku/view/ViewManager.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/data_access/PlaceHolderDAOInterface.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/data_access/UserDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/data_access/UserDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/Board.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/Board.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/CommonUser.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/CommonUser.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/CommonUserFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/CommonUserFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/EasyBoard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/EasyBoard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/GameState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/GameState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/HardBoard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/HardBoard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/entity/UserFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/entity/UserFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/interface_adapter/menu/MenuController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/interface_adapter/menu/MenuController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/use_case/menu/MenuInputBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/use_case/menu/MenuInputBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/use_case/menu/MenuOutputBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/use_case/menu/MenuOutputBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/MenuView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/MenuView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/ViewManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/ViewManager.java" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="main" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;history&quot;: [
+    {
+      &quot;state&quot;: &quot;OPEN&quot;
+    }
+  ],
+  &quot;lastFilter&quot;: {
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">
+    <option name="recentNewPullRequestHead">
+      <RepoCoordinatesHolder>
+        <option name="owner" value="mariimao" />
+        <option name="repository" value="SmartSudoku" />
+      </RepoCoordinatesHolder>
+    </option>
+    <option name="selectedUrlAndAccountId">
+      <UrlAndAccount>
+        <option name="accountId" value="a934f9b6-92b1-44e9-be4a-2e512c65a768" />
+        <option name="url" value="https://github.com/mariimao/SmartSudoku" />
+      </UrlAndAccount>
+    </option>
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectColorInfo">{
+  &quot;customColor&quot;: &quot;&quot;,
+  &quot;associatedIndex&quot;: 5
+}</component>
+  <component name="ProjectId" id="2Y2YChvdrxkXimA5BWn3WQSSUxt" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "Merging user__move",
+    "last_opened_file_path": "C:/Users/akunn/IdeaProjects/SmartSudoku",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="RunManager" selected="Application.UserDAO">
+    <configuration default="true" type="DjangoTestsConfigurationType">
+      <module name="java-quick-start" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="IS_MODULE_SDK" value="false" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="TARGET" value="" />
+      <option name="SETTINGS_FILE" value="" />
+      <option name="CUSTOM_SETTINGS" value="false" />
+      <option name="USE_OPTIONS" value="false" />
+      <option name="OPTIONS" value="" />
+      <method v="2" />
+    </configuration>
+    <configuration default="true" type="PyBehaveRunConfigurationType" factoryName="Behave">
+      <module name="java-quick-start" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="ADDITIONAL_ARGS" value="" />
+      <method v="2" />
+    </configuration>
+    <configuration default="true" type="PythonConfigurationType" factoryName="Python">
+      <module name="java-quick-start" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="IS_MODULE_SDK" value="false" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <configuration default="true" type="Python.FlaskServer">
+      <module name="java-quick-start" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="IS_MODULE_SDK" value="false" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="launchJavascriptDebuger" value="false" />
+      <method v="2" />
+    </configuration>
+    <configuration default="true" type="Tox" factoryName="Tox">
+      <module name="java-quick-start" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="IS_MODULE_SDK" value="false" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <method v="2" />
+    </configuration>
+    <configuration name="EasyBoard" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="entity.EasyBoard" />
+      <module name="java-quick-start" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="entity.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="GameState" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="entity.GameState" />
+      <module name="java-quick-start" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="entity.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="app.Main" />
+      <module name="java-quick-start" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="app.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="UserDAO" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="data_access.UserDAO" />
+      <module name="java-quick-start" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="data_access.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration default="true" type="JetRunConfigurationType">
+      <module name="java-quick-start" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
+      <module name="java-quick-start" />
+      <option name="filePath" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.UserDAO" />
+        <item itemvalue="Application.GameState" />
+        <item itemvalue="Application.EasyBoard" />
+        <item itemvalue="Application.Main" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="026eb654-f351-448d-bd07-42c46c6146ca" name="Changes" comment="" />
+      <created>1699725021435</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1699725021435</updated>
+      <workItem from="1699725029996" duration="855000" />
+      <workItem from="1699735595057" duration="30274000" />
+    </task>
+    <task id="LOCAL-00001" summary="I just made the CommonUser constructor public">
+      <option name="closed" value="true" />
+      <created>1699735313273</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1699735313273</updated>
+    </task>
+    <task id="LOCAL-00002" summary="committing changes made after deleting .idea folder and restarting intellij">
+      <option name="closed" value="true" />
+      <created>1699735537784</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1699735537784</updated>
+    </task>
+    <task id="LOCAL-00003" summary="just merged pull request 12">
+      <option name="closed" value="true" />
+      <created>1699804328255</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1699804328255</updated>
+    </task>
+    <task id="LOCAL-00004" summary="added implementation of StartUserDataAccessInterface to UserDAO">
+      <option name="closed" value="true" />
+      <created>1699804453113</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1699804453113</updated>
+    </task>
+    <task id="LOCAL-00005" summary="adding some files">
+      <option name="closed" value="true" />
+      <created>1699806218022</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1699806218022</updated>
+    </task>
+    <task id="LOCAL-00006" summary="I just added the CACoding version of the LoginState file to avoid errors for right now">
+      <option name="closed" value="true" />
+      <created>1699807006009</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1699807006009</updated>
+    </task>
+    <task id="LOCAL-00007" summary="Added an attribute to User interface to facilitate pausing the game">
+      <option name="closed" value="true" />
+      <created>1699810570467</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1699810570467</updated>
+    </task>
+    <task id="LOCAL-00008" summary="added some methods to EasyBoard to help with Pausing the game. I will add them to HardBoard as well and add a method to GameState later">
+      <option name="closed" value="true" />
+      <created>1699817551845</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1699817551845</updated>
+    </task>
+    <task id="LOCAL-00009" summary="made the method neater">
+      <option name="closed" value="true" />
+      <created>1699823755941</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1699823755941</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.History.Properties">
+    <option name="COLUMN_ID_ORDER">
+      <list>
+        <option value="Default.Root" />
+        <option value="Default.Author" />
+        <option value="Default.Date" />
+        <option value="Default.Subject" />
+        <option value="Space.CommitStatus" />
+      </list>
+    </option>
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="I just made the CommonUser constructor public" />
+    <MESSAGE value="committing changes made after deleting .idea folder and restarting intellij" />
+    <MESSAGE value="just merged pull request 12" />
+    <MESSAGE value="added implementation of StartUserDataAccessInterface to UserDAO" />
+    <MESSAGE value="adding some files" />
+    <MESSAGE value="I just added the CACoding version of the LoginState file to avoid errors for right now" />
+    <MESSAGE value="Added an attribute to User interface to facilitate pausing the game" />
+    <MESSAGE value="added some methods to EasyBoard to help with Pausing the game. I will add them to HardBoard as well and add a method to GameState later" />
+    <MESSAGE value="made the method neater" />
+    <MESSAGE value="started implementing the basics of the user_move use case (forgot to commit &amp; push these along with the previous commit &amp; push)" />
+    <option name="LAST_COMMIT_MESSAGE" value="started implementing the basics of the user_move use case (forgot to commit &amp; push these along with the previous commit &amp; push)" />
+  </component>
+</project>
\ No newline at end of file
Index: src/use_case/start/StartInputData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/start/StartInputData.java b/src/use_case/start/StartInputData.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/start/StartInputData.java	
@@ -0,0 +1,11 @@
+package use_case.start;
+
+public class StartInputData {
+    private String interaction;
+
+    public StartInputData (String interaction) {
+        this.interaction = interaction;
+    }
+
+    public String getInteracton() { return this.interaction; }
+}
Index: .idea/SmartSudoku.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/SmartSudoku.iml b/src/SmartSudoku.iml
rename from .idea/SmartSudoku.iml
rename to src/SmartSudoku.iml
--- a/.idea/SmartSudoku.iml	
+++ b/src/SmartSudoku.iml	
@@ -3,7 +3,7 @@
   <component name="NewModuleRootManager" inherit-compiler-output="true">
     <exclude-output />
     <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
diff --git a/.idea/modules.xml b/src/.idea/modules.xml
rename from .idea/modules.xml
rename to src/.idea/modules.xml
diff --git a/.idea/.gitignore b/src/.idea/.gitignore
rename from .idea/.gitignore
rename to src/.idea/.gitignore
