Index: src/data_access/PlaceHolderDAOInterface.java
===================================================================
diff --git a/src/data_access/PlaceHolderDAOInterface.java b/src/data_access/PlaceHolderDAOInterface.java
deleted file mode 100644
--- a/src/data_access/PlaceHolderDAOInterface.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-package data_access;
-
-public interface PlaceHolderDAOInterface {
-}
Index: .idea/uiDesigner.xml
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
--- a/.idea/uiDesigner.xml	
+++ /dev/null	
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
Index: src/use_case/start/StartInputBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/start/StartInputBoundary.java b/src/use_case/start/StartInputBoundary.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/start/StartInputBoundary.java	
@@ -0,0 +1,6 @@
+package use_case.start;
+
+public interface StartInputBoundary {
+
+    void execute(StartInputData startInputData);
+}
Index: src/use_case/pause_game/PauseGameOutputBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/pause_game/PauseGameOutputBoundary.java b/src/use_case/pause_game/PauseGameOutputBoundary.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/pause_game/PauseGameOutputBoundary.java	
@@ -0,0 +1,5 @@
+package use_case.pause_game;
+
+public interface PauseGameOutputBoundary {
+    // TODO: IMPLEMENT ONCE YOU START ON VIEW
+}
Index: src/use_case/pause_game/PauseGameOutputData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/pause_game/PauseGameOutputData.java b/src/use_case/pause_game/PauseGameOutputData.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/pause_game/PauseGameOutputData.java	
@@ -0,0 +1,5 @@
+package use_case.pause_game;
+
+public class PauseGameOutputData {
+    // TODO: IMPLEMENT, figure out what needs to outputted based on continuing an already started game
+}
Index: src/use_case/pause_game/PauseGameInteractor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/pause_game/PauseGameInteractor.java b/src/use_case/pause_game/PauseGameInteractor.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/pause_game/PauseGameInteractor.java	
@@ -0,0 +1,10 @@
+package use_case.pause_game;
+
+import entity.*;
+
+public class PauseGameInteractor implements PauseGameInputBoundary{
+    @Override
+    public void execute() {
+        // TODO: implement this, also create a constructor
+    }
+}
Index: src/use_case/pause_game/PauseGameInputBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/pause_game/PauseGameInputBoundary.java b/src/use_case/pause_game/PauseGameInputBoundary.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/pause_game/PauseGameInputBoundary.java	
@@ -0,0 +1,5 @@
+package use_case.pause_game;
+
+public interface PauseGameInputBoundary {
+    void execute();
+}
Index: src/use_case/pause_game/PauseGameInputData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/pause_game/PauseGameInputData.java b/src/use_case/pause_game/PauseGameInputData.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/pause_game/PauseGameInputData.java	
@@ -0,0 +1,20 @@
+package use_case.pause_game;
+import entity.*;
+
+import java.util.LinkedList;
+
+public class PauseGameInputData {
+    final private User user;
+    final private GameState current_state;
+    final private LinkedList<GameState> past_states;
+
+    public PauseGameInputData(User user, GameState currentState, LinkedList<GameState> pastStates) {
+        this.user = user;
+        current_state = currentState;
+        past_states = pastStates;
+    }
+
+    String getUsername() {return user.getName();}
+    GameState getCurrent_state() {return current_state;}
+    LinkedList<GameState> getPast_states() {return past_states;}
+}
Index: src/use_case/pause_game/PauseGameDataAccessInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/pause_game/PauseGameDataAccessInterface.java b/src/use_case/pause_game/PauseGameDataAccessInterface.java
new file mode 100644
--- /dev/null	
+++ b/src/use_case/pause_game/PauseGameDataAccessInterface.java	
@@ -0,0 +1,7 @@
+package use_case.pause_game;
+
+import entity.User;
+
+public interface PauseGameDataAccessInterface {
+    void saveProgress(User user);
+}
Index: src/interface_adapter/start/StartViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/start/StartViewModel.java b/src/interface_adapter/start/StartViewModel.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/start/StartViewModel.java	
@@ -0,0 +1,36 @@
+package interface_adapter.start;
+
+import interface_adapter.ViewModel;
+
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
+
+public class StartViewModel extends ViewModel {
+
+    public static final String TITLE_LABEL = "Welcome to Sudoku";
+
+    public static final String SIGNUP_BUTTON_LABEL = "signup";
+    public static final String LOGIN_BUTTON_LABEL = "login";
+
+    private StartState startState = new StartState();
+
+    public StartViewModel() {
+        super("start view");
+    }
+
+    public void setStartState(StartState startState) {
+        this.startState = startState;
+    }
+
+    private final PropertyChangeSupport support = new PropertyChangeSupport(this);
+
+    public void firePropertyChanged() {
+        support.firePropertyChange("state", null, this.startState);
+    }
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        support.addPropertyChangeListener(listener);
+    }
+
+    public StartState getStartState() { return this.startState; }
+}
Index: src/interface_adapter/start/StartState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/start/StartState.java b/src/interface_adapter/start/StartState.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/start/StartState.java	
@@ -0,0 +1,4 @@
+package interface_adapter.start;
+
+public class StartState {
+}
Index: src/interface_adapter/start/StartPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/start/StartPresenter.java b/src/interface_adapter/start/StartPresenter.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/start/StartPresenter.java	
@@ -0,0 +1,58 @@
+package interface_adapter.start;
+
+import interface_adapter.ViewManagerModel;
+
+import interface_adapter.login.LoginState;
+import interface_adapter.login.LoginViewModel;
+
+
+import interface_adapter.signup.SignupState;
+import interface_adapter.signup.SignupViewModel;
+import use_case.start.StartOutputBoundary;
+import use_case.start.StartOutputData;
+
+
+public class StartPresenter implements StartOutputBoundary {
+
+    private final StartViewModel startViewModel;
+    private final LoginViewModel loginViewModel;
+    private final SignupViewModel signupViewModel;
+
+    private ViewManagerModel viewManagerModel;
+
+    public StartPresenter (StartViewModel startViewModel, SignupViewModel signupViewModel,
+                           LoginViewModel loginViewModel, ViewManagerModel viewManagerModel) {
+        this.startViewModel = startViewModel;
+        this.viewManagerModel = viewManagerModel;
+        this.loginViewModel = loginViewModel;
+        this.signupViewModel = signupViewModel;
+    }
+
+    @Override
+    public void prepareSuccessView(StartOutputData startOutputData) {
+
+        // if signup is pressed, change to signup page
+        if (startOutputData.getInteracton().equals("Signup")) {
+            SignupState signupState = signupViewModel.getSignupState();
+            this.signupViewModel.setSignupState(signupState);
+            signupViewModel.firePropertyChanged();
+
+            viewManagerModel.setActiveViewName(signupViewModel.getViewName());
+        }
+        // otherwise, change to log in page
+        else if (startOutputData.getInteracton().equals("Login")) {
+            LoginState loginState = loginViewModel.getLoginState();
+            this.loginViewModel.setLoginState(loginState);
+            loginViewModel.firePropertyChanged();
+
+            viewManagerModel.setActiveViewName(loginViewModel.getViewName());
+        }
+
+        viewManagerModel.firePropertyChanged();
+
+
+    }
+    public void prepareFailView(String error) {
+        startViewModel.firePropertyChanged();
+    }
+}
Index: src/interface_adapter/pause_game/PauseGameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/pause_game/PauseGameController.java b/src/interface_adapter/pause_game/PauseGameController.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/pause_game/PauseGameController.java	
@@ -0,0 +1,4 @@
+package interface_adapter.pause_game;
+
+public class PauseGameController {
+}
Index: src/app/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport data_access.UserDAO;\r\nimport entity.EasyBoard;\r\nimport entity.HardBoard;\r\nimport entity.CommonUserFactory;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        EasyBoard easyTester = new EasyBoard();\r\n        System.out.println(easyTester);\r\n        \r\n        HardBoard hardTester = new HardBoard();\r\n        System.out.println(hardTester);\r\n\r\n\r\n        // testing userDAO\r\n        UserDAO userDataAccessObject;\r\n        try {\r\n            userDataAccessObject = new UserDAO(\"mongodb+srv://smartsudoku:smartsudoku@cluster0.hbx3f3f.mongodb.net/\\n\\n\",\r\n                    \"smartsudoku\", \"user\", new CommonUserFactory());\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        userDataAccessObject.deleteAll(); //for testing\r\n        userDataAccessObject.addUser(\"usertest1\", \"supersecurepassword\");\r\n        userDataAccessObject.addUser(\"usertest2\", \"notsosecurepassword\");\r\n        System.out.println(userDataAccessObject.toString());\r\n\r\n        userDataAccessObject.delete(\"usertest1\");\r\n        System.out.println(userDataAccessObject.toString());\r\n\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/Main.java b/src/app/Main.java
--- a/src/app/Main.java	
+++ b/src/app/Main.java	
@@ -1,23 +1,64 @@
 package app;
 
 import data_access.UserDAO;
+import entity.CommonUser;
 import entity.EasyBoard;
 import entity.HardBoard;
 import entity.CommonUserFactory;
+import interface_adapter.ViewManagerModel;
+import interface_adapter.login.LoginViewModel;
+import interface_adapter.signup.SignupController;
+import interface_adapter.signup.SignupViewModel;
+import interface_adapter.start.StartController;
+import interface_adapter.start.StartViewModel;
+import view.LoginView;
+import view.SignupView;
+import view.StartView;
+import view.ViewManager;
 
+import javax.swing.*;
+import java.awt.*;
 import java.io.IOException;
+import java.time.LocalTime;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 public class Main {
 
     public static void main(String[] args) {
-        EasyBoard easyTester = new EasyBoard();
-        System.out.println(easyTester);
-        
-        HardBoard hardTester = new HardBoard();
-        System.out.println(hardTester);
+        // Build the main program window, the main panel containing the
+        // various cards, and the layout, and stitch them together.
+
+        // The main application window.
+        JFrame application = new JFrame("Login Example");
+        application.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
 
+        CardLayout cardLayout = new CardLayout();
 
+        // The various View objects. Only one view is visible at a time.
+        JPanel views = new JPanel(cardLayout);
+        application.add(views);
+
+        // This keeps track of and manages which view is currently showing.
+        ViewManagerModel viewManagerModel = new ViewManagerModel();
+        new ViewManager(views, cardLayout, viewManagerModel);
+
+        // The data for the views, such as username and password, are in the ViewModels.
+        // This information will be changed by a presenter object that is reporting the
+        // results from the use case. The ViewModels are observable, and will
+        // be observed by the Views.
+        StartViewModel startViewModel = new StartViewModel();
+        LoginViewModel loginViewModel = new LoginViewModel();
+        SignupViewModel signupViewModel = new SignupViewModel();
+
+
+
+
         // testing userDAO
+        Logger.getLogger("org.mongodb.driver").setLevel(Level.OFF);
+
         UserDAO userDataAccessObject;
         try {
             userDataAccessObject = new UserDAO("mongodb+srv://smartsudoku:smartsudoku@cluster0.hbx3f3f.mongodb.net/\n\n",
@@ -26,13 +67,41 @@
             throw new RuntimeException(e);
         }
 
-        userDataAccessObject.deleteAll(); //for testing
-        userDataAccessObject.addUser("usertest1", "supersecurepassword");
-        userDataAccessObject.addUser("usertest2", "notsosecurepassword");
-        System.out.println(userDataAccessObject.toString());
+        //userDataAccessObject.deleteAll(); //for testing
+        Map<LocalTime, Integer> sampleScores = new HashMap<>();
+        sampleScores.put(LocalTime.now(), 4);
+        sampleScores.put(LocalTime.of(12, 30, 1), 3);
+        CommonUser user1 = new CommonUser("user1", "pass2", sampleScores);
+        userDataAccessObject.addUser(user1);
+        sampleScores.put(LocalTime.of(12, 31, 1), 4);
+        CommonUser user2 = new CommonUser("user2", "pass", sampleScores);
+        userDataAccessObject.addUser(user2);
+//        System.out.println(userDataAccessObject.toString());
+//        System.out.println(user1.getName());
+//        System.out.println(user1.getPassword());
+//        System.out.println(user1.getScores());
+//        System.out.println(user2.getName());
+//        System.out.println(user2.getPassword());
+//        System.out.println(user2.getScores());
+
+//        userDataAccessObject.delete("user1");
+//        System.out.println(userDataAccessObject.toString());
 
-        userDataAccessObject.delete("usertest1");
-        System.out.println(userDataAccessObject.toString());
+        StartView startView = StartUseCaseFactory.create(viewManagerModel, startViewModel, signupViewModel, loginViewModel, userDataAccessObject);
+        views.add(startView, startView.viewName);
+
+        viewManagerModel.setActiveViewName(startView.viewName);
+        viewManagerModel.firePropertyChanged();
+
+        application.pack();
+        application.setVisible(true);
+
+        // board generation
+        EasyBoard easyTester = new EasyBoard();
+        System.out.println(easyTester);
+
+        HardBoard hardTester = new HardBoard();
+        System.out.println(hardTester);
 
 
     }
Index: src/interface_adapter/pause_game/PauseGamePresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/pause_game/PauseGamePresenter.java b/src/interface_adapter/pause_game/PauseGamePresenter.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/pause_game/PauseGamePresenter.java	
@@ -0,0 +1,4 @@
+package interface_adapter.pause_game;
+
+public class PauseGamePresenter {
+}
Index: src/interface_adapter/start/StartController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/start/StartController.java b/src/interface_adapter/start/StartController.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/start/StartController.java	
@@ -0,0 +1,21 @@
+package interface_adapter.start;
+
+import use_case.start.StartInputBoundary;
+import use_case.start.StartInputData;
+import use_case.start.StartInteractor;
+
+public class StartController {
+
+    final StartInputBoundary startUseCaseInteractor;
+
+    public StartController(StartInputBoundary startUseCaseInteractor) {
+        this.startUseCaseInteractor = startUseCaseInteractor;
+    }
+
+    public void execute (String interaction) {
+        StartInputData startInputData = new StartInputData(interaction);
+        startUseCaseInteractor.execute(startInputData);
+    }
+
+
+}
Index: src/view/ViewManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\npublic class ViewManager {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/ViewManager.java b/src/view/ViewManager.java
--- a/src/view/ViewManager.java	
+++ b/src/view/ViewManager.java	
@@ -1,4 +1,30 @@
 package view;
 
-public class ViewManager {
+import javax.swing.*;
+import java.awt.*;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+import interface_adapter.ViewManagerModel;
+
+public class ViewManager implements PropertyChangeListener {
+
+    private final CardLayout cardLayout;
+
+    private final JPanel views;
+
+    private ViewManagerModel viewManagerModel;
+
+    public ViewManager(JPanel views, CardLayout cardLayout, ViewManagerModel viewManagerModel) {
+        this.views = views;
+        this.cardLayout = cardLayout;
+        this.viewManagerModel = viewManagerModel;
+        this.viewManagerModel.addPropertyChangeListener(this);
+    }
+
+    public void propertyChange(PropertyChangeEvent evt) {
+        if (evt.getPropertyName().equals("view")) {
+            String viewModelName = (String) evt.getNewValue();
+            cardLayout.show(views, viewModelName);
+        }
+    }
 }
Index: src/interface_adapter/ViewManagerModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/ViewManagerModel.java b/src/interface_adapter/ViewManagerModel.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/ViewManagerModel.java	
@@ -0,0 +1,25 @@
+package interface_adapter;
+
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
+
+public class ViewManagerModel {
+
+    private String activeViewName;
+
+    private final PropertyChangeSupport support = new PropertyChangeSupport(this);
+
+    public String getActiveViewName() { return activeViewName; }
+
+    public void setActiveViewName(String activeViewName) {
+        this.activeViewName = activeViewName;
+    }
+
+    public void firePropertyChanged() {
+        support.firePropertyChange("view", null, this.activeViewName);
+    }
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        support.addPropertyChangeListener(listener);
+    }
+}
Index: src/view/MenuView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\npublic class MenuView {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/MenuView.java b/src/view/MenuView.java
--- a/src/view/MenuView.java	
+++ b/src/view/MenuView.java	
@@ -1,4 +1,111 @@
 package view;
 
-public class MenuView {
+import interface_adapter.menu.MenuController;
+import interface_adapter.menu.MenuViewModel;
+import interface_adapter.start.StartController;
+import interface_adapter.start.StartViewModel;
+
+import javax.swing.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+
+public class MenuView  extends JPanel implements ActionListener, PropertyChangeListener{
+
+    public final String viewName = "menu view";
+
+    private final MenuViewModel menuViewModel;
+
+    private final MenuController menuController;
+
+    // buttons on menu
+    private final JButton loadgame;
+    private final JButton newgame;
+    private final JButton leaderboard;
+    private final JButton pastgames;
+
+
+    public MenuView(MenuController menuController, MenuViewModel menuViewModel) {
+        this.menuViewModel = menuViewModel;
+        this.menuController = menuController;
+
+        menuViewModel.addPropertyChangeListener(this);
+
+        JLabel title = new JLabel(StartViewModel.TITLE_LABEL);
+
+        JPanel buttons = new JPanel();
+
+        loadgame = new JButton(menuViewModel.LOAD_BUTTON_LABEL);
+        buttons.add(loadgame);
+
+        newgame = new JButton(menuViewModel.NEW_BUTTON_LABEL);
+        buttons.add(newgame);
+
+        leaderboard = new JButton(menuViewModel.LEADERBOARD_BUTTON_LABEL);
+        buttons.add(leaderboard);
+
+        pastgames = new JButton(menuViewModel.PAST_GAMES_BUTTON_LABEL);
+        buttons.add(pastgames);
+
+        loadgame.addActionListener(
+                new ActionListener() {
+                    @Override
+                    public void actionPerformed(ActionEvent e) {
+                        if (e.getSource().equals(loadgame)) {
+                            // loadgameController.execute();
+                        }
+                    }
+                }
+        );
+
+        newgame.addActionListener(
+                new ActionListener() {
+                    @Override
+                    public void actionPerformed(ActionEvent e) {
+                        if (e.getSource().equals(loadgame)) {
+                            // newgameController.execute();
+                        }
+                    }
+                }
+        );
+
+        leaderboard.addActionListener(
+                new ActionListener() {
+                    @Override
+                    public void actionPerformed(ActionEvent e) {
+                        if (e.getSource().equals(loadgame)) {
+                            // leaderboardController.execute();
+                        }
+                    }
+                }
+        );
+
+        pastgames.addActionListener(
+                new ActionListener() {
+                    @Override
+                    public void actionPerformed(ActionEvent e) {
+                        if (e.getSource().equals(loadgame)) {
+                            // pastgamesController.execute();
+                        }
+                    }
+                }
+        );
+
+        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
+
+        this.add(title);
+        this.add(buttons);
+
+    }
+
+    @Override
+    public void actionPerformed(ActionEvent e) {
+
+    }
+
+    @Override
+    public void propertyChange(PropertyChangeEvent evt) {
+
+    }
 }
Index: src/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entity;\r\n\r\npublic interface User {\r\n\r\n    String getName();\r\n\r\n    String getPassword();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/User.java b/src/entity/User.java
--- a/src/entity/User.java	
+++ b/src/entity/User.java	
@@ -1,8 +1,20 @@
 package entity;
 
+import java.time.LocalTime;
+import java.util.Map;
+
 public interface User {
 
     String getName();
 
     String getPassword();
+
+    Map<LocalTime, Integer> getScores();
+
+    void addScores(LocalTime time, Integer score);
+
+    void setPausedGame(GameState currentGame);
+
+    GameState getPausedGame();
+
 }
Index: src/entity/HardBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n    TODO: All of the code in this file is incomplete/broken. Please standby.\r\n */\r\n\r\npackage entity;\r\n\r\nimport java.util.*;\r\n\r\npublic class HardBoard implements Board {\r\n    private HashMap<Integer, Boolean>[][] currBoard;\r\n    private final Random random = new Random();\r\n\r\n    public HardBoard() {\r\n        this.currBoard = this.generateHardBoard();\r\n    }\r\n\r\n    private HashMap<Integer, Boolean>[][] generateHardBoard() {\r\n        /* TODO: return an Arraylist of values that generates a new Hard board.\r\n            This board will have a 9 x 9 grid.\r\n            This is the syntax for generating random numbers in python:\r\n            random.nextInt((max - min) + 1) + min;\r\n         */\r\n        int[][] possibleValues = generatePossibleHardBoardValues();\r\n        // Delete this part later -----------\r\n        String str = \"Solution: \\n\";\r\n        for (int z = 0; z <= 8; z++) {\r\n            for (int w = 0; w <= 8; w++) {\r\n                str += possibleValues[z][w];\r\n            }\r\n            str += \"\\n\";\r\n        }\r\n        System.out.println(str);\r\n        // -----------------------------------\r\n        int[][] positions = generateHardStartingPositions();\r\n        HashMap<Integer, Boolean>[][] hardBoard = blankHardBoard();\r\n        for (int i = 0; i <= 8; i++) {\r\n            for (int j = 0; j <= 8; j++) {\r\n                if (positions[i][j] == 1) {\r\n                    hardBoard[i][j].put(possibleValues[i][j], true);\r\n                }\r\n            }\r\n        }\r\n        return hardBoard;\r\n    }\r\n\r\n    private int[][] generatePossibleHardBoardValues() {\r\n        int[][] possibleValues = new int[9][9];\r\n        boolean badBoard = true;\r\n        while (badBoard) {\r\n            HashMap<int[][], Boolean> generatedValues = new HashMap<>();\r\n            generatedValues = generatePossibleHardBoardValuesHelper();\r\n            Map.Entry<int[][], Boolean> entry = generatedValues.entrySet().iterator().next();\r\n            badBoard = entry.getValue();\r\n            int[][] generated = entry.getKey();\r\n            for (int i = 0; i <= 8; i++) {\r\n                for (int j = 0; j <= 8; j++) {\r\n                    possibleValues[i][j] = generated[i][j];\r\n                }\r\n            }\r\n        }\r\n        return possibleValues;\r\n    }\r\n\r\n    private HashMap<int[][], Boolean> generatePossibleHardBoardValuesHelper() {\r\n        int[][] possibleValues = {{0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n                {0, 0, 0, 0, 0, 0, 0, 0, 0}};\r\n        HashMap<int[][], Boolean> generatedValues = new HashMap<>();\r\n        for (int i = 0; i <= 8; i++) {\r\n            for(int j = 0; j <= 8; j++) {\r\n                int value = (int) (Math.random() * 9) + 1;\r\n                int tries = 0;\r\n                while (tries <= 100 && valueNotAvailable(possibleValues, value, i, j)) {\r\n                    value = (int) (Math.random() * 9) + 1;\r\n                    tries ++;\r\n                }\r\n                if (tries > 100) {\r\n                    generatedValues.put(new int[9][9], true);\r\n                    return generatedValues;\r\n                } else {\r\n                    possibleValues[i][j] = value;\r\n                }\r\n            }\r\n        }\r\n        generatedValues.put(possibleValues, false);\r\n        return generatedValues;\r\n    }\r\n\r\n    private HashMap<Integer, Boolean>[][] blankHardBoard() {\r\n        HashMap<Integer, Boolean>[][] blankHardBoard = new HashMap[9][9];\r\n        for (int i = 0; i < 9; i++) {\r\n            for (int j = 0; j < 9; j++) {\r\n                HashMap<Integer, Boolean> blankValue = new HashMap<>();\r\n                blankHardBoard[i][j] = blankValue;\r\n            }\r\n        }\r\n        return blankHardBoard;\r\n    }\r\n\r\n    private boolean valueNotAvailable(int[][] possibleValues, int value, int x, int y) {\r\n        // Checking if the row is okay\r\n        for (int item : possibleValues[x]) {\r\n            if (value == item) {\r\n                return true;\r\n            }\r\n        }\r\n        // Checking if the column is okay\r\n        for (int i = 0; i <= 8; i++){\r\n            if (value == possibleValues[i][y]) {\r\n                return true;\r\n            }\r\n        }\r\n        // Checking if the square is okay\r\n        int sqt = (int) Math.sqrt(9);\r\n        int boxRowSt = x - x % sqt;\r\n        int boxColSt = y - y % sqt;\r\n        for (int r1 = boxRowSt; r1 < boxRowSt + sqt; r1++) {\r\n            for (int d = boxColSt; d < boxColSt + sqt; d++) {\r\n                if (possibleValues[r1][d] == value) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private int[][] generateHardStartingPositions() {\r\n        int[][] startingPositions = new int[9][9];\r\n        for (int i = 0; i <= 8; i++) {\r\n            for (int j = 0; j <= 8; j++) {\r\n                int rand = (int)(Math.random() * 2);\r\n                startingPositions[i][j] = rand;\r\n            }\r\n        }\r\n        return startingPositions;\r\n    }\r\n\r\n    public HardBoard makeMove(char x, int y, int move) {\r\n        /* TODO: this function stores the user's current move into the board,\r\n            then sends an updated board to the GameState.\r\n            - x is the x-coordinate of the user's move\r\n            - y is the y-coordinate of the user's move\r\n            - move is the integer value of the user's move\r\n         */\r\n        return this;\r\n    }\r\n\r\n    public boolean noSpacesLeft() {\r\n        for (HashMap<Integer, Boolean>[] row : currBoard) {\r\n            for (HashMap<Integer, Boolean> value : row) {\r\n                if (value.isEmpty()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public HashMap<Integer, Boolean>[][] getCurrBoard() {\r\n        return this.currBoard;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String str = \"\";\r\n        for (HashMap<Integer, Boolean>[] row : currBoard) {\r\n            for (HashMap<Integer, Boolean> map : row) {\r\n                if (map.isEmpty()) {\r\n                    str += \"0 \";\r\n                } else {\r\n                    for (Map.Entry<Integer, Boolean> entry : map.entrySet()) {\r\n                        str += entry.getKey() + \" \";\r\n                    }\r\n                }\r\n            }\r\n            str += \"\\n\";\r\n        }\r\n        return str;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/HardBoard.java b/src/entity/HardBoard.java
--- a/src/entity/HardBoard.java	
+++ b/src/entity/HardBoard.java	
@@ -6,6 +6,8 @@
 
 import java.util.*;
 
+import static entity.EasyBoard.getHashMaps;
+
 public class HardBoard implements Board {
     private HashMap<Integer, Boolean>[][] currBoard;
     private final Random random = new Random();
@@ -14,6 +16,20 @@
         this.currBoard = this.generateHardBoard();
     }
 
+    public HardBoard(String positions) {this.currBoard = generateHardBoard1(positions);}
+
+
+    private HashMap<Integer, Boolean>[][] generateHardBoard1(String str_positions) {
+        HashMap<Integer, Boolean>[][] hardBoard = blankHardBoard();
+        HashMap<Integer, Boolean> blankValue = new HashMap<>();
+        String blankChar = "0"; // how we represent blank squares
+
+        // populate the blank board with values based on str_positions
+        int sidelength = 9; // length of the Sudoku Board
+        return getHashMaps(str_positions, hardBoard, blankValue, blankChar, sidelength);
+    }
+
+
     private HashMap<Integer, Boolean>[][] generateHardBoard() {
         /* TODO: return an Arraylist of values that generates a new Hard board.
             This board will have a 9 x 9 grid.
@@ -73,12 +89,12 @@
                 {0, 0, 0, 0, 0, 0, 0, 0, 0}};
         HashMap<int[][], Boolean> generatedValues = new HashMap<>();
         for (int i = 0; i <= 8; i++) {
-            for(int j = 0; j <= 8; j++) {
+            for (int j = 0; j <= 8; j++) {
                 int value = (int) (Math.random() * 9) + 1;
                 int tries = 0;
                 while (tries <= 100 && valueNotAvailable(possibleValues, value, i, j)) {
                     value = (int) (Math.random() * 9) + 1;
-                    tries ++;
+                    tries++;
                 }
                 if (tries > 100) {
                     generatedValues.put(new int[9][9], true);
@@ -111,7 +127,7 @@
             }
         }
         // Checking if the column is okay
-        for (int i = 0; i <= 8; i++){
+        for (int i = 0; i <= 8; i++) {
             if (value == possibleValues[i][y]) {
                 return true;
             }
@@ -134,20 +150,23 @@
         int[][] startingPositions = new int[9][9];
         for (int i = 0; i <= 8; i++) {
             for (int j = 0; j <= 8; j++) {
-                int rand = (int)(Math.random() * 2);
+                int rand = (int) (Math.random() * 2);
                 startingPositions[i][j] = rand;
             }
         }
         return startingPositions;
     }
 
-    public HardBoard makeMove(char x, int y, int move) {
+    public HardBoard makeMove(int x, int y, int move) {
         /* TODO: this function stores the user's current move into the board,
             then sends an updated board to the GameState.
             - x is the x-coordinate of the user's move
             - y is the y-coordinate of the user's move
             - move is the integer value of the user's move
          */
+        HashMap<Integer, Boolean> value = new HashMap<>();
+        value.put(move, true);
+        this.currBoard[y][x] = (value);
         return this;
     }
 
@@ -183,4 +202,34 @@
         }
         return str;
     }
+
+    public String toStringPause() {
+        // return board in the format found in the overridden constructor method
+        // boardlength should be 4 for easy and 9 for hard
+        int boardlength = 9;
+        StringBuilder values = new StringBuilder();
+        HashMap<Integer, Boolean> blankValue = new HashMap<>();
+
+
+        for (int row = 0; row < boardlength; row++) {
+            for (int col = 0; col < boardlength; col++) {
+                HashMap<Integer, Boolean> position = currBoard[row][col];
+                if (position.isEmpty()) {
+                    values.append('0');
+                } else {
+                    int int_value = position.keySet().iterator().next();
+                    Boolean truth_value = position.get(int_value);
+                    String value = String.valueOf(int_value);
+                    if (truth_value) {
+                        value = value.concat("T");
+                    } else {
+                        value = value.concat("F");
+                    }
+                    values.append(value);
+                }
+            }
+        }
+
+        return values.toString();
+    }
 }
Index: src/interface_adapter/ViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/ViewModel.java b/src/interface_adapter/ViewModel.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/ViewModel.java	
@@ -0,0 +1,20 @@
+package interface_adapter;
+
+import java.beans.PropertyChangeListener;
+
+public abstract class ViewModel {
+
+    private String viewName;
+
+    public ViewModel(String viewName) {
+        this.viewName = viewName;
+    }
+
+    public String getViewName() {
+        return this.viewName;
+    }
+
+    public abstract void firePropertyChanged();
+
+    public abstract void addPropertyChangeListener(PropertyChangeListener listener);
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_20\" project-jdk-name=\"openjdk-20\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="MavenProjectsManager">
@@ -7,7 +8,5 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" project-jdk-name="openjdk-20" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$" />
-  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" default="true" project-jdk-name="corretto-20" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: src/entity/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entity;\r\n\r\npublic interface Board {\r\n    Board makeMove(char x, int y, int move);\r\n    boolean noSpacesLeft();\r\n\r\n    String toString();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/Board.java b/src/entity/Board.java
--- a/src/entity/Board.java	
+++ b/src/entity/Board.java	
@@ -1,8 +1,10 @@
 package entity;
 
 public interface Board {
-    Board makeMove(char x, int y, int move);
+    Board makeMove(int x, int y, int move);
     boolean noSpacesLeft();
 
     String toString();
+
+    String toStringPause();
 }
Index: src/entity/EasyBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entity;\r\n\r\nimport java.awt.image.AreaAveragingScaleFilter;\r\nimport java.util.*;\r\n\r\npublic class EasyBoard implements Board{\r\n    private HashMap<Integer, Boolean>[][] currBoard;\r\n    /* A matrix representing the board.\r\n    - The Integer value is the value stored in that position.\r\n    - The Boolean value is True when the value is a user stored value.\r\n    Example on an Easy board:\r\n    currBoard = [[{}, {2 = false}, {}, {4 = false}],\r\n                [{}, {}, {3 = true}, {}],\r\n                [{}, {3 = true}, {}, {1 = true}],\r\n                [{1 = false}, {}, {2 = false}, {}]]\r\n    See http://bit.ly/3tNbWNg for what this board would look like.\r\n     */\r\n    public EasyBoard() {\r\n        this.currBoard = this.generateEasyBoard();\r\n    }\r\n\r\n    private HashMap<Integer, Boolean>[][] generateEasyBoard() {\r\n        int[][] possibleValues = generatePossibleEasyBoardValues();\r\n        // Delete this part later -----------\r\n        String str = \"Solution: \\n\";\r\n        for (int z = 0; z <= 3; z++) {\r\n            for (int w = 0; w <= 3; w++) {\r\n                str += possibleValues[z][w];\r\n            }\r\n            str += \"\\n\";\r\n        }\r\n        System.out.println(str);\r\n        // -----------------------------------\r\n        ArrayList<Integer> positions = generateEasyStartingPositions();\r\n        HashMap<Integer, Boolean>[][] easyBoard = blankEasyBoard();\r\n        int i = 0;\r\n        for (int position : positions) {\r\n            easyBoard[i][position].put(possibleValues[i][position], true);\r\n            i++;\r\n        }\r\n        return easyBoard;\r\n    }\r\n\r\n    private int[][] generatePossibleEasyBoardValues() {\r\n        int[][] possibleValues = new int[4][4];\r\n        boolean badBoard = true;\r\n        while (badBoard) {\r\n            HashMap<int[][], Boolean> generatedValues = new HashMap<>();\r\n            generatedValues = generatePossibleEasyBoardValuesHelper();\r\n            Map.Entry<int[][], Boolean> entry = generatedValues.entrySet().iterator().next();\r\n            badBoard = entry.getValue();\r\n            int[][] generated = entry.getKey();\r\n            for (int i = 0; i <= 3; i++) {\r\n                for (int j = 0; j <= 3; j++) {\r\n                    possibleValues[i][j] = generated[i][j];\r\n                }\r\n            }\r\n        }\r\n        return possibleValues;\r\n    }\r\n    private HashMap<int[][], Boolean> generatePossibleEasyBoardValuesHelper() {\r\n        int[][] possibleValues = {{0, 0, 0, 0},\r\n                    {0, 0, 0, 0},\r\n                    {0, 0, 0, 0},\r\n                    {0, 0, 0, 0}};\r\n        HashMap<int[][], Boolean> generatedValues = new HashMap<>();\r\n        for (int i = 0; i <= 3; i++) {\r\n            for(int j = 0; j <= 3; j++) {\r\n                int value = (int) (Math.random() * 4) + 1;\r\n                int tries = 0;\r\n                while (tries <= 50 && valueNotAvailable(possibleValues, value, i, j)) {\r\n                    value = (int) (Math.random() * 4) + 1;\r\n                    tries ++;\r\n                }\r\n                if (tries > 50) {\r\n                    generatedValues.put(new int[4][4], true);\r\n                    return generatedValues;\r\n                } else {\r\n                    possibleValues[i][j] = value;\r\n                }\r\n            }\r\n        }\r\n        generatedValues.put(possibleValues, false);\r\n        return generatedValues;\r\n    }\r\n\r\n    private HashMap<Integer, Boolean>[][] blankEasyBoard() {\r\n        HashMap<Integer, Boolean>[][] blankEasyBoard = new HashMap[4][4];\r\n        for (int i = 0; i < 4; i++) {\r\n            for (int j = 0; j < 4; j++) {\r\n                HashMap<Integer, Boolean> blankValue = new HashMap<>();\r\n                blankEasyBoard[i][j] = blankValue;\r\n            }\r\n        }\r\n        return blankEasyBoard;\r\n    }\r\n\r\n    private boolean valueNotAvailable(int[][] possibleValues, int value, int x, int y) {\r\n        // Checking if the row is okay\r\n        for (int item : possibleValues[x]) {\r\n            if (value == item) {\r\n                return true;\r\n            }\r\n        }\r\n        // Checking if the column is okay\r\n        for (int i = 0; i <= 3; i++){\r\n            if (value == possibleValues[i][y]) {\r\n                return true;\r\n            }\r\n        }\r\n        // Checking if the square is okay\r\n        int sqt = (int) Math.sqrt(4);\r\n        int boxRowSt = x - x % sqt;\r\n        int boxColSt = y - y % sqt;\r\n        for (int r1 = boxRowSt; r1 < boxRowSt + sqt; r1++) {\r\n            for (int d = boxColSt; d < boxColSt + sqt; d++) {\r\n                if (possibleValues[r1][d] == value) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private ArrayList<Integer> generateEasyStartingPositions() {\r\n        int[][] possiblePositions = {{0, 1, 2, 3},\r\n                                    {0, 1, 2, 3},\r\n                                    {0, 1, 2, 3},\r\n                                    {0, 1, 2, 3}};\r\n        int rowAValue = 0; int rowBValue = 0; int rowCValue = 0; int rowDValue = 0;\r\n        while (threeOrMoreEqual(rowAValue, rowBValue, rowCValue, rowDValue)) {\r\n            rowAValue = (int) (Math.random() * 4);\r\n            rowBValue = (int) (Math.random() * 4);\r\n            rowCValue = (int) (Math.random() * 4);\r\n            rowDValue = (int) (Math.random() * 4);\r\n        }\r\n        ArrayList<Integer> startingPositions = new ArrayList<>();\r\n        startingPositions.add(possiblePositions[0][rowAValue]);\r\n        startingPositions.add(possiblePositions[1][rowBValue]);\r\n        startingPositions.add(possiblePositions[2][rowCValue]);\r\n        startingPositions.add(possiblePositions[3][rowDValue]);\r\n        return startingPositions;\r\n    }\r\n\r\n    private boolean threeOrMoreEqual(int a, int b, int c, int d) {\r\n        ArrayList<Integer> values = new ArrayList<>();\r\n        values.add(a); values.add(b); values.add(c); values.add(d);\r\n        for (int value : values) {\r\n            int occurrences = Collections.frequency(values, value);\r\n            if (occurrences >= 3) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public EasyBoard makeMove(char x, int y, int move) {\r\n        /* TODO: this function stores the user's current move into the board,\r\n            then sends an updated board to the GameState.\r\n            - x is the x-coordinate of the user's move\r\n            - y is the y-coordinate of the user's move\r\n            - move is the integer value of the user's move\r\n         */\r\n        return this;\r\n    }\r\n\r\n    public HashMap<Integer, Boolean>[][] getCurrBoard(){\r\n        return currBoard;\r\n    }\r\n\r\n    public boolean noSpacesLeft() {\r\n        for (HashMap<Integer, Boolean>[] row : currBoard) {\r\n            for (HashMap<Integer, Boolean> value : row) {\r\n                if (value.isEmpty()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String str = \"\";\r\n        for (HashMap<Integer, Boolean>[] row : currBoard) {\r\n            for (HashMap<Integer, Boolean> map : row) {\r\n                if (map.isEmpty()) {\r\n                    str += \"0 \";\r\n                } else {\r\n                    for (Map.Entry<Integer, Boolean> entry : map.entrySet()) {\r\n                        str += entry.getKey() + \" \";\r\n                    }\r\n                }\r\n            }\r\n            str += \"\\n\";\r\n        }\r\n        return str;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/EasyBoard.java b/src/entity/EasyBoard.java
--- a/src/entity/EasyBoard.java	
+++ b/src/entity/EasyBoard.java	
@@ -4,6 +4,13 @@
 import java.util.*;
 
 public class EasyBoard implements Board{
+    public static void main(String[] args) {
+        //TODO: DELETE MAIN, just for testing
+        EasyBoard testBoard = new EasyBoard();
+        System.out.println(testBoard);
+        System.out.println(testBoard.toStringPause());
+        System.out.println(new EasyBoard("003T00004T004T01F2T00"));
+    }
     private HashMap<Integer, Boolean>[][] currBoard;
     /* A matrix representing the board.
     - The Integer value is the value stored in that position.
@@ -19,6 +26,71 @@
         this.currBoard = this.generateEasyBoard();
     }
 
+    public EasyBoard(String positions) {this.currBoard = generateEasyBoard1(positions);}
+
+    private HashMap<Integer, Boolean>[][] generateEasyBoard1(String str_positions) {
+           /* This is a helper for the overloaded constructor for the EasyBoard class that will generate a board based
+           on a complete set of positions.
+          */
+        // currBoard = [[{}, {2 = false}, {}, {4 = false}],
+        //                [{}, {}, {3 = true}, {}],
+        //                [{}, {3 = true}, {}, {1 = true}],
+        //                [{1 = false}, {}, {2 = false}, {}]]
+        // the string representation of currBoard should be:  "#2T#4F##3T##3T#1T1F#2F#"
+
+        HashMap<Integer, Boolean>[][] easyBoard = blankEasyBoard();
+        HashMap<Integer, Boolean> blankValue = new HashMap<>();
+        String blankChar = "0"; // how we represent blank squares
+
+        // populate the blank board with values based on str_positions
+        int sidelength = 4; // length of the Sudoku Board
+        return getHashMaps(str_positions, easyBoard, blankValue, blankChar, sidelength);
+    }
+
+    static HashMap<Integer, Boolean>[][] getHashMaps(String str_positions, HashMap<Integer, Boolean>[][] easyBoard, HashMap<Integer, Boolean> blankValue, String blankChar, int sidelength) {
+        String info; // corresponding information based on str_positions
+
+        for (int row = 0; row < sidelength; row++) {
+            for (int col = 0; col < sidelength; col++) {
+                if (String.valueOf(str_positions.charAt(0)).equals(blankChar)) {
+                    easyBoard[row][col] = blankValue;
+                    str_positions = str_positions.substring(1);
+                }
+                else {
+                    info =  str_positions.substring(0,2);
+                    str_positions = str_positions.substring(2);
+                    int int_value = Integer.parseInt(info.substring(0,1));
+                    boolean truth_value = info.charAt(1) == 'T';
+                    HashMap<Integer, Boolean> value = new HashMap<>();
+                    value.put(int_value, truth_value);
+                    easyBoard[row][col] = value;
+                }
+            }
+        }
+        return easyBoard;
+    }
+
+    private static ArrayList<String> generateArrayFromString(String str_positions) {
+        // creates an array based on the strings such that each index corresponds to a specific positions info
+        ArrayList<String> positions = new ArrayList<>();
+
+        String info = "";
+        for (char character : str_positions.toCharArray()) {
+            info = info.concat(String.valueOf(character));
+            if (info.equals("0")) {
+                positions.add(info);
+                info = "";
+                continue;
+            }
+            if (info.length() == 2) {
+                positions.add(info);
+                info = "";
+            }
+        }
+        positions.add(info);
+        return positions;
+    }
+
     private HashMap<Integer, Boolean>[][] generateEasyBoard() {
         int[][] possibleValues = generatePossibleEasyBoardValues();
         // Delete this part later -----------
@@ -154,14 +226,18 @@
         return false;
     }
 
-    public EasyBoard makeMove(char x, int y, int move) {
+    public EasyBoard makeMove(int x, int y, int move) { // akunna: I changed move to an int
         /* TODO: this function stores the user's current move into the board,
             then sends an updated board to the GameState.
             - x is the x-coordinate of the user's move
             - y is the y-coordinate of the user's move
             - move is the integer value of the user's move
          */
-        return this;
+        HashMap<Integer, Boolean> value = new HashMap<>();
+        value.put(move, true);
+        this.currBoard[y][x] = (value);
+
+        return this; // akunna: I don't think that this needs to be returned since we are mutating the board. This method is essentially a setter, right?
     }
 
     public HashMap<Integer, Boolean>[][] getCurrBoard(){
@@ -196,4 +272,30 @@
         }
         return str;
     }
+
+    public String toStringPause() {
+        // return board in the format found in the overridden constructor method
+        // boardlength should be 4 for easy and 9 for hard
+        StringBuilder values = new StringBuilder();
+        HashMap<Integer, Boolean> blankValue = new HashMap<>();
+        int boardlength = 4;
+
+
+        for (int row = 0; row < boardlength; row++) {
+            for (int col = 0; col < boardlength; col++) {
+                HashMap<Integer, Boolean> position = currBoard[row][col];
+                if(position.isEmpty()) {values.append('0');}
+                else{
+                    int int_value = position.keySet().iterator().next();
+                    Boolean truth_value = position.get(int_value);
+                    String value = String.valueOf(int_value);
+                    if (truth_value) {value = value.concat("T");}
+                    else {value = value.concat("F");}
+                    values.append(value);
+                }
+            }
+        }
+
+        return values.toString();
+    }
 }
Index: src/entity/GameState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entity;\r\n\r\npublic class GameState {\r\n\r\n    private final int difficulty; // 1 - easy, 2 - hard\r\n    private final SudokuAI sudokuAI;\r\n    private Board currBoard;\r\n    private int lives;\r\n\r\n    public GameState(int difficulty) {\r\n        this.difficulty = difficulty;\r\n        this.sudokuAI = new SudokuAI(difficulty);\r\n        if (difficulty == 1) {\r\n            currBoard = new EasyBoard();\r\n        } else {\r\n            currBoard = new HardBoard();\r\n        }\r\n        this.lives = 5;\r\n    }\r\n\r\n    public void makeMove(char x, int y, int move) {\r\n        currBoard = currBoard.makeMove(x, y, move);\r\n    }\r\n\r\n    public void scrambleBoard() {\r\n        sudokuAI.scramble(currBoard);\r\n    }\r\n\r\n    public void loseLife(){\r\n        lives -= 1;\r\n    }\r\n\r\n    public boolean gameOver() {\r\n        return currBoard.noSpacesLeft();\r\n    }\r\n\r\n    public int getDifficulty() {\r\n        return this.difficulty;\r\n    }\r\n\r\n    public Board getCurrBoard() {\r\n        return this.currBoard;\r\n    }\r\n\r\n    public int getLives() {\r\n        return this.lives;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/GameState.java b/src/entity/GameState.java
--- a/src/entity/GameState.java	
+++ b/src/entity/GameState.java	
@@ -1,12 +1,22 @@
 package entity;
+import java.util. *;
 
 public class GameState {
+    public static void main(String[] args) {
+        //TODO: DELETE MAIN, just for testing
+        EasyBoard testBoard = new EasyBoard("003T00004T004T01F2T00");
+        GameState testState = new GameState(1);
+        System.out.println(testState.currBoard);
+        System.out.println(testState.toStringPause());
+    }
 
     private final int difficulty; // 1 - easy, 2 - hard
     private final SudokuAI sudokuAI;
     private Board currBoard;
     private int lives;
 
+    private LinkedList<GameState> past_states;
+
     public GameState(int difficulty) {
         this.difficulty = difficulty;
         this.sudokuAI = new SudokuAI(difficulty);
@@ -16,6 +26,22 @@
             currBoard = new HardBoard();
         }
         this.lives = 5;
+        this.past_states = new LinkedList<>();
+    }
+
+    // akunna: overloading the GameState constructor so that it can pass in a linked list for the previous GameStates
+    // seen when necessary
+    public GameState(int difficulty, LinkedList<GameState> past_states) {
+        this.difficulty = difficulty;
+        this.sudokuAI = new SudokuAI(difficulty);
+        if (difficulty == 1) {
+            currBoard = new EasyBoard();
+        } else {
+            currBoard = new HardBoard();
+        }
+        this.lives = 5;
+
+        this.past_states = past_states;
     }
 
     public void makeMove(char x, int y, int move) {
@@ -42,8 +68,36 @@
         return this.currBoard;
     }
 
+    public void setCurrBoard(String values) {
+        if (difficulty == 1) {this.currBoard = new EasyBoard(values);}
+        else {this.currBoard = new HardBoard(values);}
+    }
+
     public int getLives() {
         return this.lives;
     }
 
+    public LinkedList<GameState> getPastStates() {return this.past_states; }
+
+    public String toStringPause() {
+        // should return everything needed to create an exact replica of this state (not counting the past states)
+        // board representation-difficulty-lives
+        // EXAMPLE: 003T00004T004T01F2T00-1-4  should be returned for board below if the player has only 4 lives
+        // currBoard =    [
+        //                [{},          {2 = false}, {},          {4 = false}],
+        //                [{},          {},          {3 = true},  {}],
+        //                [{},          {3 = true},  {},          {1 = true}],
+        //                [{1 = false}, {},          {2 = false}, {}]
+        //                ]
+        if (this == null) {return "No Paused Game Exists";}
+        if (this.currBoard == null) {return "No Board Exists for this Game State ";}
+        StringJoiner representation = new StringJoiner("-");
+        String boardRep = this.currBoard.toStringPause();
+        representation.add(boardRep);
+        representation.add(String.valueOf(difficulty));
+        representation.add(String.valueOf(lives));
+
+        return  representation.toString();
+    }
+
 }
Index: src/interface_adapter/menu/MenuViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/menu/MenuViewModel.java b/src/interface_adapter/menu/MenuViewModel.java
new file mode 100644
--- /dev/null	
+++ b/src/interface_adapter/menu/MenuViewModel.java	
@@ -0,0 +1,43 @@
+package interface_adapter.menu;
+
+import interface_adapter.ViewModel;
+import interface_adapter.start.StartState;
+
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
+
+public class MenuViewModel extends ViewModel {
+
+    public static final String TITLE_LABEL = "Menu";
+
+    public static final String LOAD_BUTTON_LABEL = "Load";
+
+    public static final String NEW_BUTTON_LABEL = "New Game";
+
+    public static final String LEADERBOARD_BUTTON_LABEL = "Leaderboard";
+
+    public static final String PAST_GAMES_BUTTON_LABEL = "Past Games";
+
+    private MenuState menuState = new MenuState();
+
+    public MenuViewModel() {
+        super("start view");
+    }
+
+    public void setMenuState(MenuState menuState) {
+        this.menuState = menuState;
+    }
+
+    private final PropertyChangeSupport support = new PropertyChangeSupport(this);
+
+    public void firePropertyChanged() {
+        support.firePropertyChange("state", null, this.menuState);
+    }
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        support.addPropertyChangeListener(listener);
+    }
+
+    public MenuState getMenuState() { return this.menuState; }
+
+}
Index: src/entity/LeaderboardByHighScore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/LeaderboardByHighScore.java b/src/entity/LeaderboardByHighScore.java
new file mode 100644
--- /dev/null	
+++ b/src/entity/LeaderboardByHighScore.java	
@@ -0,0 +1,77 @@
+package entity;
+
+
+import java.time.LocalTime;
+import java.util.*;
+
+public class LeaderboardByHighScore implements Leaderboard {
+
+    private final Map<String, User> accounts;
+    private final SortedMap<Integer, Set<String>> leaderboard;
+
+
+    public LeaderboardByHighScore(Map<String, User> accounts) {
+        this.accounts = accounts;
+        this.leaderboard = this.generateLeaderboard();
+    }
+
+    public SortedMap<Integer, Set<String>> getLeaderboard() {
+        return this.leaderboard;
+    }
+
+    public SortedMap<Integer, Set<String>> generateLeaderboard() {
+        Map<Integer, Set<String>> highScoreToUsers = this.highScoreToUsers();
+
+        SortedMap<Integer, Set<String>> leaderboard = new TreeMap<>();
+
+        Set<Integer> scores = this.highScoreToUsers().keySet();
+        Integer highestScore = Collections.max(scores);
+        for (int i = 1; i <= highScoreToUsers.size(); i++) {
+            leaderboard.put(i, highScoreToUsers.get(highestScore));
+            scores.remove(highestScore);
+            if (!scores.isEmpty()) {
+                highestScore = Collections.max(scores);
+            }
+        }
+        return leaderboard;
+    }
+
+    private Map<Integer, Set<String>> highScoreToUsers() {
+        Map<Integer, Set<String>> highScoreToUsers = new HashMap<>();
+        for (String name : accounts.keySet()) {
+            Integer highScore = Collections.max(accounts.get(name).getScores().values());
+            if (highScoreToUsers.containsKey(highScore)) {
+                highScoreToUsers.get(highScore).add(name);
+            } else {
+                Set<String> names = new HashSet<>();
+                names.add(name);
+                highScoreToUsers.put(highScore, names);
+            }
+        }
+        return highScoreToUsers;
+    }
+
+    public static void main(String[] args) {
+        Map<String, User> accounts = new HashMap<>();
+
+        Map<LocalTime, Integer> sample = new HashMap<>();
+        sample.put(LocalTime.of(1,2,3), 10);
+        sample.put(LocalTime.of(1,2,5), 9);
+        accounts.put("Spongebob", new CommonUser("Spongebob", "a", sample));
+
+        Map<LocalTime, Integer> sample2 = new HashMap<>();
+        sample2.put(LocalTime.of(1,2,3), 13);
+        sample2.put(LocalTime.of(1,2,4), 12);
+        accounts.put("Patrick", new CommonUser("Patrick", "a", sample2));
+
+        Map<LocalTime, Integer> sample3 = new HashMap<>();
+        sample3.put(LocalTime.of(1,2,3), 4);
+        sample3.put(LocalTime.of(1,2,4), 5);
+        sample3.put(LocalTime.of(1,2,5), 13);
+        accounts.put("Squidward", new CommonUser("Squidward", "a", sample3));
+
+        Leaderboard leaderboard = new LeaderboardByHighScore(accounts);
+
+        System.out.println(leaderboard.generateLeaderboard());
+    }
+}
Index: src/entity/UserFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entity;\r\n\r\npublic interface UserFactory {\r\n\r\n    User create(String name, String password);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/UserFactory.java b/src/entity/UserFactory.java
--- a/src/entity/UserFactory.java	
+++ b/src/entity/UserFactory.java	
@@ -1,6 +1,9 @@
 package entity;
 
+import java.time.LocalTime;
+import java.util.Map;
+
 public interface UserFactory {
 
-    User create(String name, String password);
+    User create(String name, String password, Map<LocalTime, Integer> scores);
 }
Index: src/entity/Leaderboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entity/Leaderboard.java b/src/entity/Leaderboard.java
new file mode 100644
--- /dev/null	
+++ b/src/entity/Leaderboard.java	
@@ -0,0 +1,9 @@
+package entity;
+
+import java.util.SortedMap;
+import java.util.Set;
+
+public interface Leaderboard {
+
+    SortedMap<Integer, Set<String>> generateLeaderboard();
+}
